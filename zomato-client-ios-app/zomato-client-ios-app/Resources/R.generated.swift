//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `LogoColor`.
    static let logoColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "LogoColor")
    /// Color `NavigationBarColor`.
    static let navigationBarColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "NavigationBarColor")
    /// Color `borderLightGreyColor`.
    static let borderLightGreyColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "borderLightGreyColor")
    
    /// `UIColor(named: "LogoColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func logoColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.logoColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "NavigationBarColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func navigationBarColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.navigationBarColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "borderLightGreyColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func borderLightGreyColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.borderLightGreyColor, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `input.xcfilelist`.
    static let inputXcfilelist = Rswift.FileResource(bundle: R.hostingBundle, name: "input", pathExtension: "xcfilelist")
    /// Resource file `output.xcfilelist`.
    static let outputXcfilelist = Rswift.FileResource(bundle: R.hostingBundle, name: "output", pathExtension: "xcfilelist")
    
    /// `bundle.url(forResource: "input", withExtension: "xcfilelist")`
    static func inputXcfilelist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.inputXcfilelist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "output", withExtension: "xcfilelist")`
    static func outputXcfilelist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.outputXcfilelist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `Button Search`.
    static let buttonSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button Search")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `Zomato-flat-logo`.
    static let zomatoFlatLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Zomato-flat-logo")
    /// Image `domain`.
    static let domain = Rswift.ImageResource(bundle: R.hostingBundle, name: "domain")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `zomato-infinity-dining`.
    static let zomatoInfinityDining = Rswift.ImageResource(bundle: R.hostingBundle, name: "zomato-infinity-dining")
    /// Image `zomato-logo-navigation-bar`.
    static let zomatoLogoNavigationBar = Rswift.ImageResource(bundle: R.hostingBundle, name: "zomato-logo-navigation-bar")
    
    /// `UIImage(named: "Button Search", bundle: ..., traitCollection: ...)`
    static func buttonSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buttonSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Zomato-flat-logo", bundle: ..., traitCollection: ...)`
    static func zomatoFlatLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zomatoFlatLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "domain", bundle: ..., traitCollection: ...)`
    static func domain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.domain, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zomato-infinity-dining", bundle: ..., traitCollection: ...)`
    static func zomatoInfinityDining(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zomatoInfinityDining, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "zomato-logo-navigation-bar", bundle: ..., traitCollection: ...)`
    static func zomatoLogoNavigationBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zomatoLogoNavigationBar, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `CityTableViewCell`.
    static let cityTableViewCell = _R.nib._CityTableViewCell()
    /// Nib `RestaurantTableViewCell`.
    static let restaurantTableViewCell = _R.nib._RestaurantTableViewCell()
    
    /// `UINib(name: "CityTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cityTableViewCell) instead")
    static func cityTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cityTableViewCell)
    }
    
    /// `UINib(name: "RestaurantTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.restaurantTableViewCell) instead")
    static func restaurantTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restaurantTableViewCell)
    }
    
    static func cityTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CityTableViewCell? {
      return R.nib.cityTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityTableViewCell
    }
    
    static func restaurantTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestaurantTableViewCell? {
      return R.nib.restaurantTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurantTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CityTableViewCell`.
    static let cityTableViewCell: Rswift.ReuseIdentifier<CityTableViewCell> = Rswift.ReuseIdentifier(identifier: "CityTableViewCell")
    /// Reuse identifier `RestaurantTableViewCell`.
    static let restaurantTableViewCell: Rswift.ReuseIdentifier<RestaurantTableViewCell> = Rswift.ReuseIdentifier(identifier: "RestaurantTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `CitiesStoryboard`.
    static let citiesStoryboard = _R.storyboard.citiesStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MenuStoryboard`.
    static let menuStoryboard = _R.storyboard.menuStoryboard()
    /// Storyboard `RestaurantsStoryboard`.
    static let restaurantsStoryboard = _R.storyboard.restaurantsStoryboard()
    /// Storyboard `RootStoryboard`.
    static let rootStoryboard = _R.storyboard.rootStoryboard()
    
    /// `UIStoryboard(name: "CitiesStoryboard", bundle: ...)`
    static func citiesStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.citiesStoryboard)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MenuStoryboard", bundle: ...)`
    static func menuStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menuStoryboard)
    }
    
    /// `UIStoryboard(name: "RestaurantsStoryboard", bundle: ...)`
    static func restaurantsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.restaurantsStoryboard)
    }
    
    /// `UIStoryboard(name: "RootStoryboard", bundle: ...)`
    static func rootStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.rootStoryboard)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _RestaurantTableViewCell.validate()
    }
    
    struct _CityTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CityTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CityTableViewCell"
      let name = "CityTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CityTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RestaurantTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RestaurantTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "RestaurantTableViewCell"
      let name = "RestaurantTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestaurantTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurantTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "domain", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'domain' is used in nib 'RestaurantTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map' is used in nib 'RestaurantTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "NavigationBarColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NavigationBarColor' is used in storyboard 'RestaurantTableViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try citiesStoryboard.validate()
      try launchScreen.validate()
      try menuStoryboard.validate()
      try restaurantsStoryboard.validate()
      try rootStoryboard.validate()
    }
    
    struct citiesStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let citiesViewController = StoryboardViewControllerResource<CitiesViewController>(identifier: "CitiesViewController")
      let name = "CitiesStoryboard"
      
      func citiesViewController(_: Void = ()) -> CitiesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: citiesViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "NavigationBarColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NavigationBarColor' is used in storyboard 'CitiesStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.citiesStoryboard().citiesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'citiesViewController' could not be loaded from storyboard 'CitiesStoryboard' as 'CitiesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Zomato-flat-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Zomato-flat-logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "LogoColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LogoColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct menuStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "MenuStoryboard"
      
      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "NavigationBarColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NavigationBarColor' is used in storyboard 'MenuStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.menuStoryboard().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'MenuStoryboard' as 'MenuViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct restaurantsStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RestaurantsStoryboard"
      let restaurantsViewController = StoryboardViewControllerResource<RestaurantsViewController>(identifier: "RestaurantsViewController")
      
      func restaurantsViewController(_: Void = ()) -> RestaurantsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Button Search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Button Search' is used in storyboard 'RestaurantsStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "zomato-infinity-dining", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zomato-infinity-dining' is used in storyboard 'RestaurantsStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "NavigationBarColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NavigationBarColor' is used in storyboard 'RestaurantsStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.restaurantsStoryboard().restaurantsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantsViewController' could not be loaded from storyboard 'RestaurantsStoryboard' as 'RestaurantsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct rootStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootNavigationController
      
      let bundle = R.hostingBundle
      let name = "RootStoryboard"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
